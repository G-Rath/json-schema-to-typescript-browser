"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
/**
 * Duck types a JSONSchema schema or property to determine which kind of AST node to parse it into.
 */
function typesOfSchema(schema) {
    var types = [];
    if (schema.$ref)
        return ['REFERENCE'];
    if (schema.allOf)
        types.push('ALL_OF');
    if (schema.anyOf)
        types.push('ANY_OF');
    if (schema.oneOf)
        types.push('ONE_OF');
    if (schema.items)
        types.push('TYPED_ARRAY');
    if (schema.enum && schema.tsEnumNames)
        types.push('NAMED_ENUM');
    if (schema.enum)
        types.push('UNNAMED_ENUM');
    if (schema.id)
        types.push('NAMED_SCHEMA');
    if (Array.isArray(schema.type))
        types.push('UNION');
    switch (schema.type) {
        case 'string':
            types.push('STRING');
            break;
        case 'number':
            types.push('NUMBER');
            break;
        case 'integer':
            types.push('NUMBER');
            break;
        case 'boolean':
            types.push('BOOLEAN');
            break;
        case 'object':
            if (!schema.properties && !lodash_1.isPlainObject(schema)) {
                types.push('OBJECT');
            }
            break;
        case 'array':
            types.push('UNTYPED_ARRAY');
            break;
        case 'null':
            types.push('NULL');
            break;
        case 'any':
            types.push('ANY');
            break;
    }
    switch (typeof schema.default) {
        case 'boolean':
            types.push('BOOLEAN');
            break;
        case 'number':
            types.push('NUMBER');
            break;
        case 'string':
            types.push('STRING');
            break;
    }
    if (lodash_1.isPlainObject(schema)
        && Object.keys(schema).length
        && !types.length)
        types.push('UNNAMED_SCHEMA');
    if (!types.length)
        types.push('ANY');
    return types;
}
exports.typesOfSchema = typesOfSchema;
//# sourceMappingURL=typesOfSchema.js.map