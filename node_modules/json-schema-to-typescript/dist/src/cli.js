#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("mz/fs");
const path_1 = require("path");
const stdin = require("stdin");
const index_1 = require("./index");
const minimist = require("minimist");
main(minimist(process.argv.slice(2), {
    alias: {
        help: ['h'],
        input: ['i'],
        output: ['o']
    }
}));
function main(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        if (argv.help) {
            printHelp();
            process.exit(0);
        }
        const argIn = argv._[0] || argv.input;
        const argOut = argv._[1] || argv.output;
        try {
            const schema = JSON.parse(yield readInput(argIn));
            const ts = yield index_1.compile(schema, argIn);
            yield writeOutput(ts, argOut);
        }
        catch (e) {
            process.stderr.write(e.message);
            process.exit(1);
        }
    });
}
function readInput(argIn) {
    if (!argIn) {
        return new Promise(stdin);
    }
    return fs_1.readFile(path_1.join(process.cwd(), argIn), 'utf-8');
}
function writeOutput(ts, argOut) {
    if (!argOut) {
        try {
            process.stdout.write(ts);
            return Promise.resolve();
        }
        catch (err) {
            return Promise.reject(err);
        }
    }
    return fs_1.writeFile(argOut, ts);
}
function printHelp() {
    const pkg = require('../package.json');
    process.stdout.write(`
${pkg.name} ${pkg.version}
Usage: json2ts [--input, -i] [IN_FILE] [--output, -o] [OUT_FILE]

With no IN_FILE, or when IN_FILE is -, read standard input.
With no OUT_FILE and when IN_FILE is specified, create .d.ts file in the same directory.
With no OUT_FILE nor IN_FILE, write to standard output.
`);
}
//# sourceMappingURL=cli.js.map