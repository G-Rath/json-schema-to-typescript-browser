"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const generator_1 = require("./generator");
const normalizer_1 = require("./normalizer");
const optimizer_1 = require("./optimizer");
const parser_1 = require("./parser");
const resolver_1 = require("./resolver");
const utils_1 = require("./utils");
const validator_1 = require("./validator");
exports.DEFAULT_OPTIONS = {
    cwd: process.cwd(),
    declareReferenced: true,
    enableConstEnums: true,
    enableTrailingSemicolonForEnums: false,
    enableTrailingSemicolonForInterfaceProperties: true,
    enableTrailingSemicolonForInterfaces: false,
    enableTrailingSemicolonForTypes: true,
    indentWith: '  '
};
function compileFromFile(filename, options = exports.DEFAULT_OPTIONS) {
    const contents = utils_1.Try(() => fs_1.readFileSync(filename), () => { throw new ReferenceError(`Unable to read file "${filename}"`); });
    const schema = utils_1.Try(() => JSON.parse(contents.toString()), () => { throw new TypeError(`Error parsing JSON in file "${filename}"`); });
    return compile(schema, utils_1.stripExtension(filename), Object.assign({}, options, { cwd: path_1.dirname(filename) }));
}
exports.compileFromFile = compileFromFile;
function compile(schema, name, options = exports.DEFAULT_OPTIONS) {
    return __awaiter(this, void 0, void 0, function* () {
        const errors = validator_1.validate(schema, name);
        if (errors.length) {
            errors.forEach(_ => utils_1.error(_));
            throw new ValidationError;
        }
        return generator_1.generate(optimizer_1.optimize(parser_1.parse(yield resolver_1.dereference(normalizer_1.normalize(schema, name), options.cwd))), Object.assign({}, exports.DEFAULT_OPTIONS, options));
    });
}
exports.compile = compile;
class ValidationError extends Error {
}
exports.ValidationError = ValidationError;
//# sourceMappingURL=index.js.map