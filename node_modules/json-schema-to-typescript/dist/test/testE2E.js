"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const fs_1 = require("fs");
const lodash_1 = require("lodash");
const path_1 = require("path");
const src_1 = require("../src");
const utils_1 = require("../src/utils");
const reporter_1 = require("./reporter");
const dir = __dirname + '/e2e';
function hasOnly() {
    return fs_1.readdirSync(dir)
        .filter(_ => /^.*\.js$/.test(_))
        .map(_ => require(path_1.join(dir, _)))
        .some(_ => _.only);
}
exports.hasOnly = hasOnly;
function run() {
    // [filename, absolute dirname, contents][]
    const modules = fs_1.readdirSync(dir)
        .filter(_ => /^.*\.js$/.test(_))
        .map(_ => [_, path_1.dirname(path_1.join(dir, _)), require(path_1.join(dir, _))]);
    // exporting `const only=true` will only run that test
    // exporting `const exclude=true` will not run that test
    const only = lodash_1.find(modules, _ => _[2].only);
    if (only) {
        runOne(only[2], only[0], only[1]);
    }
    else {
        modules
            .filter(_ => !_[2].exclude)
            .forEach(_ => runOne(_[2], _[0], _[1]));
    }
}
exports.run = run;
function runOne(exports, name, dirname) {
    utils_1.log(`Running test: "${name}"`);
    if (isMultiTestCase(exports)) {
        exports.outputs.forEach(_ => {
            const settings = Object.assign({}, _.settings, { cwd: dirname });
            const caseName = `${name}: ${JSON.stringify(_.settings)}`;
            ava_1.test(caseName, (t) => __awaiter(this, void 0, void 0, function* () {
                if (_.error) {
                    try {
                        yield src_1.compile(exports.input, utils_1.stripExtension(name), settings);
                    }
                    catch (e) {
                        t.true(e instanceof src_1.ValidationError);
                    }
                }
                else {
                    reporter_1.compare(t, caseName, yield src_1.compile(exports.input, utils_1.stripExtension(name), settings), _.output);
                }
            }));
        });
    }
    else {
        const settings = Object.assign({}, exports.settings, { cwd: dirname });
        ava_1.test(name, (t) => __awaiter(this, void 0, void 0, function* () {
            if (exports.error) {
                try {
                    yield src_1.compile(exports.input, utils_1.stripExtension(name), settings);
                }
                catch (e) {
                    t.true(e instanceof src_1.ValidationError);
                }
            }
            else {
                reporter_1.compare(t, name, yield src_1.compile(exports.input, utils_1.stripExtension(name), settings), exports.output);
            }
        }));
    }
}
function isMultiTestCase(exports) {
    return 'outputs' in exports;
}
//# sourceMappingURL=testE2E.js.map