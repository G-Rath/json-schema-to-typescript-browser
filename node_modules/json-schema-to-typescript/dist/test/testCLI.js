"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const expected = `export interface ExampleSchema {
  firstName: string;
  lastName: string;
  /**
   * Age in years
   */
  age?: number;
  height?: number;
  favoriteFoods?: any[];
  likesDogs?: boolean;
  [k: string]: any;
}
`;
function run() {
    ava_1.test('pipe in, pipe out', t => {
        t.is(child_process_1.execSync('cat ./test/resources/ReferencedType.json | node dist/src/cli.js', { encoding: 'utf-8' }).toString(), expected);
    });
    ava_1.test('file in (no flags), pipe out', t => {
        t.is(child_process_1.execSync('node dist/src/cli.js ./test/resources/ReferencedType.json').toString(), expected);
    });
    ava_1.test('file in (--input), pipe out', t => {
        t.is(child_process_1.execSync('node dist/src/cli.js --input ./test/resources/ReferencedType.json').toString(), expected);
    });
    ava_1.test('file in (-i), pipe out', t => {
        t.is(child_process_1.execSync('node dist/src/cli.js -i ./test/resources/ReferencedType.json').toString(), expected);
    });
    ava_1.test('pipe in, file out (--output)', t => {
        child_process_1.execSync('cat ./test/resources/ReferencedType.json | node dist/src/cli.js --output ./ReferencedType.d.ts').toString();
        t.is(fs_1.readFileSync('./ReferencedType.d.ts', 'utf-8'), expected);
        fs_1.unlinkSync('./ReferencedType.d.ts');
    });
    ava_1.test('pipe in, file out (-o)', t => {
        child_process_1.execSync('cat ./test/resources/ReferencedType.json | node dist/src/cli.js -o ./ReferencedType.d.ts').toString();
        t.is(fs_1.readFileSync('./ReferencedType.d.ts', 'utf-8'), expected);
        fs_1.unlinkSync('./ReferencedType.d.ts');
    });
    ava_1.test('file in (no flags), file out (no flags)', t => {
        child_process_1.execSync('node dist/src/cli.js ./test/resources/ReferencedType.json ./ReferencedType.d.ts').toString();
        t.is(fs_1.readFileSync('./ReferencedType.d.ts', 'utf-8'), expected);
        fs_1.unlinkSync('./ReferencedType.d.ts');
    });
    ava_1.test('file in (-i), file out (-o)', t => {
        child_process_1.execSync('node dist/src/cli.js -i ./test/resources/ReferencedType.json -o ./ReferencedType.d.ts').toString();
        t.is(fs_1.readFileSync('./ReferencedType.d.ts', 'utf-8'), expected);
        fs_1.unlinkSync('./ReferencedType.d.ts');
    });
    ava_1.test('file in (--input), file out (--output)', t => {
        child_process_1.execSync('node dist/src/cli.js --input ./test/resources/ReferencedType.json --output ./ReferencedType.d.ts').toString();
        t.is(fs_1.readFileSync('./ReferencedType.d.ts', 'utf-8'), expected);
        fs_1.unlinkSync('./ReferencedType.d.ts');
    });
}
exports.run = run;
//# sourceMappingURL=testCLI.js.map